/*
 * Copyright Â© 2020-2021 by Academia Sinica
 *
 * This file is part of SKISSM.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * SKISSM is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with SKISSM.  If not, see <http://www.gnu.org/licenses/>.
 */
syntax = "proto3";

package skissm;

option java_package = "org.e2eelab.proto.skissm";
option java_outer_classname = "SessionProto";
option objc_class_prefix = "Objc";
option swift_prefix="Swift";

import "skissm/E2eeAddress.proto";
import "skissm/KeyPair.proto";
import "skissm/Ratchet.proto";

message Session {
    string version = 1;                             // The version
    string e2ee_pack_id = 2;                        // The e2ee pack ID
    string session_id = 3;                          // The session ID
    E2eeAddress our_address = 4;                    // Our address
    E2eeAddress their_address = 5;                  // Their address

    Ratchet ratchet = 11;                           // The ratchet proto
    bytes associated_data = 12;                     // The associated data
    bytes temp_shared_secret = 13;                  // The shared secret encapsulated by the invitee's pre-key bundle, empty in ECC

    bytes alice_identity_key = 21;                  // The inviter's identity key
    bytes alice_ephemeral_key = 22;                 // The inviter's ephemeral key, empty in PQC
    KeyPair alice_base_key = 23;                    // The inviter's base key pair
    bytes bob_signed_pre_key = 24;                  // The invitee's signed pre-key
    uint32 bob_signed_pre_key_id = 25;              // The invitee's signed pre-key ID
    bytes bob_one_time_pre_key = 26;                // The invitee's one-time pre-key
    uint32 bob_one_time_pre_key_id = 27;            // The invitee's one-time pre-key ID
    repeated bytes encaps_ciphertext_list = 28;     // The ciphertext encapsulated by the invitee's pre-key bundle, empty in ECC

    bool f2f = 31;                                  // The session is face-to-face or not
    bool responded = 32;                            // The invitee has responded or not
    int64 t_invite = 33;
}
